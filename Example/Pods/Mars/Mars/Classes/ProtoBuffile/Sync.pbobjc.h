// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class SyncMsg;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SyncResponse_Status

/** 状态枚举 */
typedef GPB_ENUM(SyncResponse_Status) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SyncResponse_Status_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SyncResponse_Status_Ok = 0,
  SyncResponse_Status_Err = 1,
};

GPBEnumDescriptor *SyncResponse_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SyncResponse_Status_IsValidValue(int32_t value);

#pragma mark - SyncRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface SyncRoot : GPBRootObject
@end

#pragma mark - SyncRequest

typedef GPB_ENUM(SyncRequest_FieldNumber) {
  SyncRequest_FieldNumber_Uid = 1,
  SyncRequest_FieldNumber_Domain = 2,
  SyncRequest_FieldNumber_Offset = 3,
  SyncRequest_FieldNumber_Limit = 4,
  SyncRequest_FieldNumber_ClientType = 5,
  SyncRequest_FieldNumber_LogId = 6,
  SyncRequest_FieldNumber_AppId = 7,
};

/**
 * 消息同步（拉离线）
 **/
@interface SyncRequest : GPBMessage

/** 用户id,包含内部、外部、匿名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uid;

/** 用户所属类别，见枚举类UserDomain */
@property(nonatomic, readwrite) int32_t domain;

/** 拉取消息起始位置，初始是0，之后用服务器返回的数据 */
@property(nonatomic, readwrite) int64_t offset;

/** 单次拉取消息的数量，默认值50 */
@property(nonatomic, readwrite) int32_t limit;

/** IM端类型，见枚举类ClientType, 未来用来过滤这个端发出来的消息 */
@property(nonatomic, readwrite) int32_t clientType;

/** 服务端traceid，用于跟踪消息流转全链路。与notify.proto中保持一致 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *logId;

/** app标识，如瓜子，毛豆app */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appId;

@end

#pragma mark - SyncMsg

typedef GPB_ENUM(SyncMsg_FieldNumber) {
  SyncMsg_FieldNumber_From = 1,
  SyncMsg_FieldNumber_FromName = 2,
  SyncMsg_FieldNumber_FromDomain = 3,
  SyncMsg_FieldNumber_ChatId = 4,
  SyncMsg_FieldNumber_Content = 5,
  SyncMsg_FieldNumber_Msgid = 6,
  SyncMsg_FieldNumber_Sequence = 7,
  SyncMsg_FieldNumber_CmdId = 8,
  SyncMsg_FieldNumber_SendTime = 9,
  SyncMsg_FieldNumber_Type = 10,
  SyncMsg_FieldNumber_AppId = 11,
  SyncMsg_FieldNumber_SceneId = 12,
  SyncMsg_FieldNumber_Extra = 13,
};

@interface SyncMsg : GPBMessage

/** 发送者id, cmdId=3007时，为分配的客服ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *from;

/** cmdId=3007时，为分配的客服name */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fromName;

/** 发送者所属用户类型,具体见DomainType */
@property(nonatomic, readwrite) int32_t fromDomain;

/** 会话ID */
@property(nonatomic, readwrite) int64_t chatId;

/** 消息内容 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *content;

/** 消息服务器对消息的编号， */
@property(nonatomic, readwrite) int64_t msgid;

/** 按人全局唯一的消息序号 */
@property(nonatomic, readwrite) int32_t sequence;

/** 消息原始命令号，可标识消息类型 */
@property(nonatomic, readwrite) int32_t cmdId;

/** 服务器接收消息时间 */
@property(nonatomic, readwrite) int64_t sendTime;

/** 消息内容类型，比如文本，图片，文件 */
@property(nonatomic, readwrite) int32_t type;

/** app标识，如瓜子，毛豆app */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appId;

/** 场景ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sceneId;

/** 如果是系统消息包含系统消息类型 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *extra;

@end

#pragma mark - SyncResponse

typedef GPB_ENUM(SyncResponse_FieldNumber) {
  SyncResponse_FieldNumber_MsgArray = 1,
  SyncResponse_FieldNumber_Status = 2,
};

@interface SyncResponse : GPBMessage

/** 消息，采用富文本传递 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SyncMsg*> *msgArray;
/** The number of items in @c msgArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger msgArray_Count;

/** 状态，使用枚举 */
@property(nonatomic, readwrite) int32_t status;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
