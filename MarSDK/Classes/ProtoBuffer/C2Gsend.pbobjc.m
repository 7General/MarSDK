// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c2gsend.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "C2Gsend.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - C2GsendRoot

@implementation C2GsendRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - C2GsendRoot_FileDescriptor

static GPBFileDescriptor *C2GsendRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol.protobuf"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - C2GSendRequest

@implementation C2GSendRequest

@dynamic from;
@dynamic fromName;
@dynamic fromDomain;
@dynamic chatId;
@dynamic content;
@dynamic type;

typedef struct C2GSendRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t fromDomain;
  int32_t type;
  NSString *from;
  NSString *fromName;
  NSString *content;
  int64_t chatId;
} C2GSendRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = C2GSendRequest_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C2GSendRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromName",
        .dataTypeSpecific.className = NULL,
        .number = C2GSendRequest_FieldNumber_FromName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C2GSendRequest__storage_, fromName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromDomain",
        .dataTypeSpecific.className = NULL,
        .number = C2GSendRequest_FieldNumber_FromDomain,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C2GSendRequest__storage_, fromDomain),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chatId",
        .dataTypeSpecific.className = NULL,
        .number = C2GSendRequest_FieldNumber_ChatId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C2GSendRequest__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = C2GSendRequest_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(C2GSendRequest__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = C2GSendRequest_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(C2GSendRequest__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C2GSendRequest class]
                                     rootClass:[C2GsendRoot class]
                                          file:C2GsendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C2GSendRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\010\000\003\n\000\004\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - C2GSendResponse

@implementation C2GSendResponse

@dynamic msgid;
@dynamic timestamp;

typedef struct C2GSendResponse__storage_ {
  uint32_t _has_storage_[1];
  int64_t msgid;
  int64_t timestamp;
} C2GSendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgid",
        .dataTypeSpecific.className = NULL,
        .number = C2GSendResponse_FieldNumber_Msgid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C2GSendResponse__storage_, msgid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = C2GSendResponse_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C2GSendResponse__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C2GSendResponse class]
                                     rootClass:[C2GsendRoot class]
                                          file:C2GsendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C2GSendResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
