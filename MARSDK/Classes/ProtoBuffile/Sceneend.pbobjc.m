// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sceneend.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Sceneend.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SceneendRoot

@implementation SceneendRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SceneendRoot_FileDescriptor

static GPBFileDescriptor *SceneendRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol.protobuf"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SceneEndSendRequest

@implementation SceneEndSendRequest

@dynamic sceneId;
@dynamic appId;
@dynamic chatId;
@dynamic to;
@dynamic toDomain;
@dynamic guid;
@dynamic agentId;
@dynamic agentName;
@dynamic ext;

typedef struct SceneEndSendRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t toDomain;
  NSString *sceneId;
  NSString *appId;
  NSString *to;
  NSString *guid;
  NSString *agentId;
  NSString *agentName;
  NSString *ext;
  int64_t chatId;
} SceneEndSendRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sceneId",
        .dataTypeSpecific.className = NULL,
        .number = SceneEndSendRequest_FieldNumber_SceneId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SceneEndSendRequest__storage_, sceneId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = SceneEndSendRequest_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SceneEndSendRequest__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatId",
        .dataTypeSpecific.className = NULL,
        .number = SceneEndSendRequest_FieldNumber_ChatId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SceneEndSendRequest__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = SceneEndSendRequest_FieldNumber_To,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SceneEndSendRequest__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toDomain",
        .dataTypeSpecific.className = NULL,
        .number = SceneEndSendRequest_FieldNumber_ToDomain,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SceneEndSendRequest__storage_, toDomain),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "guid",
        .dataTypeSpecific.className = NULL,
        .number = SceneEndSendRequest_FieldNumber_Guid,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SceneEndSendRequest__storage_, guid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agentId",
        .dataTypeSpecific.className = NULL,
        .number = SceneEndSendRequest_FieldNumber_AgentId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SceneEndSendRequest__storage_, agentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agentName",
        .dataTypeSpecific.className = NULL,
        .number = SceneEndSendRequest_FieldNumber_AgentName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SceneEndSendRequest__storage_, agentName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ext",
        .dataTypeSpecific.className = NULL,
        .number = SceneEndSendRequest_FieldNumber_Ext,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SceneEndSendRequest__storage_, ext),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SceneEndSendRequest class]
                                     rootClass:[SceneendRoot class]
                                          file:SceneendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SceneEndSendRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\005\000\003\006\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SceneEndSendResponse

@implementation SceneEndSendResponse

@dynamic msgid;
@dynamic timestamp;

typedef struct SceneEndSendResponse__storage_ {
  uint32_t _has_storage_[1];
  int64_t msgid;
  int64_t timestamp;
} SceneEndSendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgid",
        .dataTypeSpecific.className = NULL,
        .number = SceneEndSendResponse_FieldNumber_Msgid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SceneEndSendResponse__storage_, msgid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = SceneEndSendResponse_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SceneEndSendResponse__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SceneEndSendResponse class]
                                     rootClass:[SceneendRoot class]
                                          file:SceneendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SceneEndSendResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
