// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kickout.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Kickout.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - KickoutRoot

@implementation KickoutRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - KickoutRoot_FileDescriptor

static GPBFileDescriptor *KickoutRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol.protobuf"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - KickoutRequest

@implementation KickoutRequest

@dynamic reason;
@dynamic message;

typedef struct KickoutRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t reason;
  NSString *message;
} KickoutRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reason",
        .dataTypeSpecific.className = NULL,
        .number = KickoutRequest_FieldNumber_Reason,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KickoutRequest__storage_, reason),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = KickoutRequest_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KickoutRequest__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KickoutRequest class]
                                     rootClass:[KickoutRoot class]
                                          file:KickoutRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KickoutRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum KickoutRequest_Reason

GPBEnumDescriptor *KickoutRequest_Reason_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ForbidUse\000OtherLogin\000InBlackList\000OtherRe"
        "ason\000RetryConnect\000";
    static const int32_t values[] = {
        KickoutRequest_Reason_ForbidUse,
        KickoutRequest_Reason_OtherLogin,
        KickoutRequest_Reason_InBlackList,
        KickoutRequest_Reason_OtherReason,
        KickoutRequest_Reason_RetryConnect,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(KickoutRequest_Reason)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:KickoutRequest_Reason_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL KickoutRequest_Reason_IsValidValue(int32_t value__) {
  switch (value__) {
    case KickoutRequest_Reason_ForbidUse:
    case KickoutRequest_Reason_OtherLogin:
    case KickoutRequest_Reason_InBlackList:
    case KickoutRequest_Reason_OtherReason:
    case KickoutRequest_Reason_RetryConnect:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - KickoutResponse

@implementation KickoutResponse


typedef struct KickoutResponse__storage_ {
  uint32_t _has_storage_[1];
} KickoutResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KickoutResponse class]
                                     rootClass:[KickoutRoot class]
                                          file:KickoutRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(KickoutResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
