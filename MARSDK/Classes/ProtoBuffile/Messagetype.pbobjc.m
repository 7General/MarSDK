// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messagetype.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Messagetype.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MessagetypeRoot

@implementation MessagetypeRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum MsgType

GPBEnumDescriptor *MsgType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "MsgTypeText\000MsgTypeImage\000MsgTypeVoice\000Ms"
        "gTypeFile\000MsgTypeURL\000MsgTypeNotify\000MsgTy"
        "peVcard\000MsgTypeRedPacket\000MsgTypeRedPacke"
        "tTips\000MsgTypeEmoticon\000MsgTypeRichText\000";
    static const int32_t values[] = {
        MsgType_MsgTypeText,
        MsgType_MsgTypeImage,
        MsgType_MsgTypeVoice,
        MsgType_MsgTypeFile,
        MsgType_MsgTypeURL,
        MsgType_MsgTypeNotify,
        MsgType_MsgTypeVcard,
        MsgType_MsgTypeRedPacket,
        MsgType_MsgTypeRedPacketTips,
        MsgType_MsgTypeEmoticon,
        MsgType_MsgTypeRichText,
    };
    static const char *extraTextFormatInfo = "\001\004c\344\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MsgType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MsgType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MsgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MsgType_MsgTypeText:
    case MsgType_MsgTypeImage:
    case MsgType_MsgTypeVoice:
    case MsgType_MsgTypeFile:
    case MsgType_MsgTypeURL:
    case MsgType_MsgTypeNotify:
    case MsgType_MsgTypeVcard:
    case MsgType_MsgTypeRedPacket:
    case MsgType_MsgTypeRedPacketTips:
    case MsgType_MsgTypeEmoticon:
    case MsgType_MsgTypeRichText:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
